/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paliwa;

import com.toedter.calendar.JCalendar;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import static paliwa.Pistolet.konwertujNaPistolet;
import static paliwa.Zbiornik.konwerujNaZbiornik;

/**
 *
 * @author luna
 */
public class OknoGłówne extends javax.swing.JFrame {

    /**
     * Creates new form OknoGłówne
     */
    public OknoGłówne() {
        initComponents();
        kalendarz = new JCalendar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        DostawceaButtonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        TabelejComboBox = new javax.swing.JComboBox();
        wykonajButton = new javax.swing.JButton();
        daneZDniaButton2 = new javax.swing.JButton();
        zakresDniButton2 = new javax.swing.JButton();
        pobierzDaneButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        plikMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Tabela z której chcesz pobrać dane:");
        jLabel1.setToolTipText("");

        jLabel2.setText("Dane z dnia:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        TabelejComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NozzleMeasures", "Refuel", "TankMeasures" }));
        TabelejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TabelejComboBoxActionPerformed(evt);
            }
        });

        wykonajButton.setText("Wykonaj");
        wykonajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wykonajButtonActionPerformed(evt);
            }
        });

        daneZDniaButton2.setText("Z dnia");
        daneZDniaButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daneZDniaButton2ActionPerformed(evt);
            }
        });

        zakresDniButton2.setText("Z zakresu dni");
        zakresDniButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zakresDniButton2ActionPerformed(evt);
            }
        });

        pobierzDaneButton1.setText("Pobierz dane ze strumienia");
        pobierzDaneButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pobierzDaneButton1ActionPerformed(evt);
            }
        });

        plikMenu1.setText("Plik");

        jMenuItem1.setText("Wybierz folder z danymi");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        plikMenu1.add(jMenuItem1);

        jMenuItem2.setText("Wczytaj dane");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        plikMenu1.add(jMenuItem2);

        jMenuBar1.add(plikMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TabelejComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pobierzDaneButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(daneZDniaButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zakresDniButton2)))
                        .addGap(59, 59, 59)
                        .addComponent(wykonajButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TabelejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(wykonajButton)
                    .addComponent(daneZDniaButton2)
                    .addComponent(zakresDniButton2))
                .addGap(11, 11, 11)
                .addComponent(pobierzDaneButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            folderPath = fc.getSelectedFile().getAbsolutePath();           
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ArrayList<String> lista;
        try {
            lista = wczytajDaneArchwiwalne(folderPath + "\\tankMeasures.log");
            zbiornikiCzysciec = konwerujNaZbiornik(lista);
            lista = wczytajDaneArchwiwalne(folderPath + "\\nozzleMeasures.log");
            pistoletyCzysciec = konwertujNaPistolet(lista);
            lista = wczytajDaneArchwiwalne(folderPath + "\\refuel.log");
            tankowaniaCzysciec = Tankowanie.konwertujNaTankowanie(lista);
            
             Timer t = new Timer(1000, new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if(zbiornikiCzysciec.size()>0)
                    {
                        zbiorniki.add(zbiornikiCzysciec.remove(0));
                        System.out.println("Dodałem zbiornik "+zbiorniki.get(zbiorniki.size()-1).ts.toString());
                    }
                    if(pistoletyCzysciec.size()>0)
                    {
                        pistolety.add(pistoletyCzysciec.remove(0));
                        System.out.println("Dodałem pistolet");
                    }
                    if(tankowaniaCzysciec.size()>0)
                    {
                        tankowania.add(tankowaniaCzysciec.remove(0));
                        System.out.println("Dodałem tankowanie");
                    }
                }
            });
            t.start();
            
            JOptionPane.showMessageDialog(this, "Poprawnie wczytano dane", "Informacja", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(OknoGłówne.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas wczytywania danych","Błąd",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void TabelejComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TabelejComboBoxActionPerformed
        int tabela = TabelejComboBox.getSelectedIndex();

        switch (tabela) {
            case 0: {
                nazwaTabeli = "NozzleMeasures";
            }
            break;
            case 1: {
                nazwaTabeli = "Refuel";
            }
            break;
            case 2: {
                nazwaTabeli = "TankMeasures";
            }
            break;
        }
    }//GEN-LAST:event_TabelejComboBoxActionPerformed

    private void daneZDniaButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daneZDniaButton2ActionPerformed
        if (JOptionPane.showConfirmDialog(daneZDniaButton2, kalendarz, "Wybierz dzień", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            int rok = kalendarz.getYearChooser().getYear();
            int dzien = kalendarz.getDayChooser().getDay();
            int miesiac = kalendarz.getMonthChooser().getMonth();
            System.out.println("Rok: " + rok + " Miesiąc: " + miesiac + " Dzień: " + dzien);
            Calendar c = Calendar.getInstance();
            c.set(rok, miesiac, dzien);
            //dataOd = c.getTime();
            dataOd = new Date(rok - 1900, miesiac, dzien);
            dataDo = null;
        }
    }//GEN-LAST:event_daneZDniaButton2ActionPerformed

    private void wykonajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wykonajButtonActionPerformed
        TabelejComboBox.setEditable(false);
        String query;
        if (dataDo == null) {
            String d = new Timestamp(dataOd.getTime()).toString();
//            query = "SELECT *"
//                    + "  FROM [dbo].[" + nazwaTabeli + "]"
//                    + "  WHERE [Data i godzina]='" + d.substring(0, 10) + "'";
            query = "SELECT *"
                    + "  FROM [dbo].[" + nazwaTabeli + "]"
                    + "  WHERE YEAR([Data i godzina]) =('" + d.substring(0, 4) + 
                    "') AND MONTH([Data i godzina]) = ('"+d.substring(6,7)+
                    "') AND DAY([Data i godzina]) = ('"+d.substring(8, 10)+"')";
        } else {
            String d1 = new Timestamp(dataOd.getTime()).toString();
            String d2 = new Timestamp(dataDo.getTime()).toString();
            query = "SELECT *"
                    + "  FROM [dbo].[" + nazwaTabeli + "]"
                    + "WHERE (YEAR([Data i godzina]) >=('" + d1.substring(0, 4) + 
                    "') AND MONTH([Data i godzina]) >= ('"+d1.substring(6,7)+
                    "') AND DAY([Data i godzina]) >= ('"+d1.substring(8, 10)+"') ) AND "+
                    "YEAR([Data i godzina]) <=('" + d2.substring(0, 4) + 
                    "') AND MONTH([Data i godzina]) <= ('"+d2.substring(6,7)+
                    "') AND DAY([Data i godzina]) <= ('"+d2.substring(8, 10)+"')";
        }
        ArrayList<ArrayList<String>> lista = new ArrayList<ArrayList<String>>();
        ResultSet result = null;
        final int tabela = TabelejComboBox.getSelectedIndex();
        TableModel model = new TableModel();
        switch (tabela) {
            case 0:
                model.setNazwakol(pistoletyKolumny);
                break;
            case 1:
                model.setNazwakol(tankowanieKolumny);
                break;
            case 2:
                model.setNazwakol(zbiornikiKolumny);
                break;
        }
        //pobieranie danych z bazy
        try {
            result = sendQuery(polaczenie, query);
            long i=0;
            while (result.next()) {

                switch (tabela) {
                    case 0: {
                        ArrayList<String> l = new ArrayList<>();
                        l.add(result.getString("Data i godzina"));
                        l.add(result.getString("LocationId"));
                        l.add(result.getString("Id pistoletu"));
                        l.add(result.getString("Id zbiornika"));
                        l.add(result.getString("LiterCounter"));
                        l.add(result.getString("TotalCounter"));
                        l.add(result.getString("Status"));
                        lista.add(l);
                    }
                    break;
                    case 1: {
                        ArrayList<String> l = new ArrayList<>();
                        l.add(result.getString("Data i godzina"));
                        l.add(result.getString("Id zbiornika"));
                        l.add(result.getString("Objętość paliwa"));
                        l.add(result.getString("Szybkość tankowania"));
                        lista.add(l);
                    }
                    break;
                    case 2: {
                        ArrayList<String> l = new ArrayList<>();
                        l.add(result.getString("Data i godzina"));
                        l.add(result.getString("LocationId"));
                        l.add(result.getString("MeterId"));
                        l.add(result.getString("Id zbiornika"));
                        l.add(result.getString("Wysokość paliwa"));
                        l.add(result.getString("Objętość paliwa"));
                        l.add(result.getString("Wysokość wody"));
                        l.add(result.getString("Objętość wody"));
                        lista.add(l);
                    }
                    break;
                }
                ++i;
            }
            System.out.println("Zapytanie: "+ query);
            System.out.println("Zwróciło: "+i+" wyników.");
        } catch (Exception ex) {
            Logger.getLogger(OknoGłówne.class.getName()).log(Level.SEVERE, null, ex);
        }
        //szukanie w "strumieniu"
        if (tabela == 0) //pistolety
        {
            if (pistolety.size() > 0) {
                for (Pistolet p : pistolety) {
                    if (dataDo == null) {
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(dataOd);
                        Calendar calP = Calendar.getInstance();
                        calP.setTimeInMillis(p.ts.getTime());
                        if (cal.get(Calendar.YEAR) == calP.get(Calendar.YEAR)
                                && cal.get(Calendar.MONTH) == calP.get(Calendar.MONTH)
                                && cal.get(Calendar.DAY_OF_MONTH) == calP.get(Calendar.DAY_OF_MONTH)) {

                            lista.add(p.toStringArray());
                        }
                    } else if (dataDo != null && dataOd != null) {
                        Calendar calOd = Calendar.getInstance();
                        calOd.setTime(dataOd);
                        Calendar calDo = Calendar.getInstance();
                        calDo.setTime(dataDo);
                        Calendar calP = Calendar.getInstance();
                        calP.setTime(p.ts);

                        if (calP.get(Calendar.YEAR) >= calOd.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) >= calOd.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) >= calOd.get(Calendar.DAY_OF_MONTH)
                                && calP.get(Calendar.YEAR) <= calDo.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) <= calDo.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) <= calDo.get(Calendar.DAY_OF_MONTH)) {
                            lista.add(p.toStringArray());
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Błąd daty.");
                    }
                }
            }
        } else if (tabela == 1) {//tankowanie
            if (tankowania.size() > 0) {
                for (Tankowanie t : tankowania) {
                    if (dataDo == null) {
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(dataOd);
                        Calendar calP = Calendar.getInstance();
                        calP.setTimeInMillis(t.ts.getTime());
                        if (cal.get(Calendar.YEAR) == calP.get(Calendar.YEAR)
                                && cal.get(Calendar.MONTH) == calP.get(Calendar.MONTH)
                                && cal.get(Calendar.DAY_OF_MONTH) == calP.get(Calendar.DAY_OF_MONTH)) {

                            lista.add(t.toStringArray());
                        }
                    } else if (dataDo != null && dataOd != null) {
                        Calendar calOd = Calendar.getInstance();
                        calOd.setTime(dataOd);
                        Calendar calDo = Calendar.getInstance();
                        calDo.setTime(dataDo);
                        Calendar calP = Calendar.getInstance();
                        calP.setTime(t.ts);

                        if (calP.get(Calendar.YEAR) >= calOd.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) >= calOd.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) >= calOd.get(Calendar.DAY_OF_MONTH)
                                && calP.get(Calendar.YEAR) <= calDo.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) <= calDo.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) <= calDo.get(Calendar.DAY_OF_MONTH)) {
                            lista.add(t.toStringArray());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Błąd daty.");
                    }
                }
            }
        } else if (tabela == 2) //zbiornik
        {
            if (zbiorniki.size() > 0) {
                for (Zbiornik z : zbiorniki) {
                    if (dataDo == null) {
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(dataOd);
                        Calendar calP = Calendar.getInstance();
                        calP.setTimeInMillis(z.ts.getTime());
                        if (cal.get(Calendar.YEAR) == calP.get(Calendar.YEAR)
                                && cal.get(Calendar.MONTH) == calP.get(Calendar.MONTH)
                                && cal.get(Calendar.DAY_OF_MONTH) == calP.get(Calendar.DAY_OF_MONTH)) {
                            lista.add(z.toStringArray());
                        }
                    } else if (dataDo != null && dataOd != null) {
                        Calendar calOd = Calendar.getInstance();
                        calOd.setTime(dataOd);
                        Calendar calDo = Calendar.getInstance();
                        calDo.setTime(dataDo);
                        Calendar calP = Calendar.getInstance();
                        calP.setTime(z.ts);

                        if (calP.get(Calendar.YEAR) >= calOd.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) >= calOd.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) >= calOd.get(Calendar.DAY_OF_MONTH)
                                && calP.get(Calendar.YEAR) <= calDo.get(Calendar.YEAR)
                                && calP.get(Calendar.MONTH) <= calDo.get(Calendar.MONTH)
                                && calP.get(Calendar.DAY_OF_MONTH) <= calDo.get(Calendar.DAY_OF_MONTH)) {
                            lista.add(z.toStringArray());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Błąd daty.");
                    }
                }
            }
        }
        model.setKolumny(lista);
        jTable2.setModel(model);
        TabelejComboBox.setEditable(true);
    }//GEN-LAST:event_wykonajButtonActionPerformed

    private void zakresDniButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zakresDniButton2ActionPerformed
        if (JOptionPane.showConfirmDialog(daneZDniaButton2, kalendarz, "Wybierz pierwszy dzień", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            int rok = kalendarz.getYearChooser().getYear();
            int dzien = kalendarz.getDayChooser().getDay();
            int miesiac = kalendarz.getMonthChooser().getMonth();
            System.out.println("Rok: " + rok + " Miesiąc: " + miesiac + " Dzień: " + dzien);
            Calendar c = Calendar.getInstance();
            c.set(rok, miesiac, dzien);
            //dataOd = c.getTime();
            dataOd = new Date(rok - 1900, miesiac, dzien);
            dataDo = null;
            if (JOptionPane.showConfirmDialog(daneZDniaButton2, kalendarz, "Wybierz drugi dzień", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                rok = kalendarz.getYearChooser().getYear();
                dzien = kalendarz.getDayChooser().getDay();
                miesiac = kalendarz.getMonthChooser().getMonth();
                System.out.println("Rok: " + rok + " Miesiąc: " + miesiac + " Dzień: " + dzien);
                //c.set(rok, miesiac, dzien);
                dataDo = new Date(rok - 1900, miesiac, dzien);
                //dataDo = c.getTime();
            }
        }
    }//GEN-LAST:event_zakresDniButton2ActionPerformed

    private void pobierzDaneButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pobierzDaneButton1ActionPerformed
        Date date = null;
        if(zbiorniki != null && pistolety != null && tankowania != null)
        if (JOptionPane.showConfirmDialog(daneZDniaButton2, kalendarz, "Wybierz dzień", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            int rok = kalendarz.getYearChooser().getYear();
            int dzien = kalendarz.getDayChooser().getDay();
            int miesiac = kalendarz.getMonthChooser().getMonth();
            System.out.println("Rok: " + rok + " Miesiąc: " + miesiac + " Dzień: " + dzien);
            Calendar c = Calendar.getInstance();
            c.set(rok, rok, dzien);
            date = c.getTime();
            //date = new Date(rok - 1900, miesiac, dzien);
            ArrayList<Zbiornik> listaZbiorniki = new ArrayList<>();
            ArrayList<Pistolet> listaPistolety = new ArrayList<>();
            ArrayList<Tankowanie> listaTankowanie = new ArrayList<>();
            for (int i = 0; i < zbiorniki.size(); ++i) {
                Date tmpDate = new Date(zbiorniki.get(i).ts.getTime());
                if (tmpDate.before(date)) {
                    listaZbiorniki.add(zbiorniki.remove(i));
                    --i;
                }
            }
            for (int i = 0; i < pistolety.size(); ++i) {
                Date tmpDate = new Date(pistolety.get(i).ts.getTime());
                if (tmpDate.before(date)) {
                    listaPistolety.add(pistolety.remove(i));
                    --i;
                }
            }
            for (int i = 0; i < tankowania.size(); ++i) {
                Date tmpDate = new Date(tankowania.get(i).ts.getTime());
                if (tmpDate.before(date)) {
                    listaTankowanie.add(tankowania.remove(i));
                    --i;
                }
            }
            Zbiornik.wyslijDoBazy(listaZbiorniki, polaczenie);
            Pistolet.wyslijDoBazy(listaPistolety, polaczenie);
            Tankowanie.wyslijDoBazy(listaTankowanie, polaczenie);
        }
    }//GEN-LAST:event_pobierzDaneButton1ActionPerformed

    public String wczytajLinie(BufferedReader br ) throws IOException
    {
        String linia = null;
        
        if( (linia = br.readLine()) != null )
           return linia; 
        
        return null;
    }
    
    public ArrayList<String> wczytajDaneArchwiwalne(String filePath) throws FileNotFoundException, IOException {
        ArrayList<String> linie = new ArrayList<>();
        FileReader fr = new FileReader(new File(filePath));
        BufferedReader br = new BufferedReader(fr);

        String l = null;
        while ( (l = br.readLine()) != null ) {
            linie.add(l);
        }
        System.out.println("Wczytałem :" + linie.size() + " linii.");
        fr.close();
        return linie;
    }

    public static ResultSet sendQuery(Connection connection, String query) throws Exception {
        Statement statement = connection.createStatement();
        return statement.executeQuery(query);
    }

    public static boolean sendQueryAlt(Connection connection, String query) throws Exception {
        Statement statement = connection.createStatement();
        return statement.execute(query);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OknoGłówne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OknoGłówne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OknoGłówne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OknoGłówne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new OknoGłówne().setVisible(true);
            }
        });
    }

    public void setPołączenie(Connection polaczenie) {
        this.polaczenie = polaczenie;
    }

    private ArrayList<Zbiornik> zbiornikiCzysciec = new ArrayList<>();
    private ArrayList<Pistolet> pistoletyCzysciec = new ArrayList<>();
    private ArrayList<Tankowanie> tankowaniaCzysciec = new ArrayList<>();
    private String[] tankowanieKolumny = {"[Data i godzina]", "[Id zbiornika]", "[Objętość paliwa]", "[Szybkość tankowania]"};
    private String[] zbiornikiKolumny = {"[Data i godzina]", "[MeterId]", "[Id zbiornika]", "[Wysokość paliwa]", "[Objętość paliwa]", "[Temperatura paliwa]", "[Wysokość wody]", "[Objętość wody]"};
    private String[] pistoletyKolumny = {"[Data i godzina]", "[LocationId]", "[Id pistoletu]", "[Id zbiornika]",
        "[LiterCounter]", "[TotalCounter]", "[Status]"};
    public static String folderPath = "C:\\Users\\luna\\Dropbox\\Mati\\Dane paliwowe\\Dane paliwowe\\Zestaw 1";
    private Connection polaczenie;
    private ArrayList<Zbiornik> zbiorniki = new ArrayList<>();
    private ArrayList<Pistolet> pistolety = new ArrayList<>();
    private ArrayList<Tankowanie> tankowania = new ArrayList<>();
    private JCalendar kalendarz;
    private Date dataOd = null;
    private Date dataDo = null;
    private String nazwaTabeli = "NozzleMeasures";
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup DostawceaButtonGroup1;
    private javax.swing.JComboBox TabelejComboBox;
    private javax.swing.JButton daneZDniaButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JMenu plikMenu1;
    private javax.swing.JButton pobierzDaneButton1;
    private javax.swing.JButton wykonajButton;
    private javax.swing.JButton zakresDniButton2;
    // End of variables declaration//GEN-END:variables
}
